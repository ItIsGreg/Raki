name: Tauri v2 Release Process
on:
  workflow_dispatch:
    # You can optionally add inputs here if you want to parameterize the manual run
    # inputs:
    #   version:
    #     description: 'Release version'
    #     required: true
    #     default: '0.1.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CN_APPLICATION: "raki/raki"

jobs:
  draft:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - name: create draft release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  build:
    needs: draft

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install uv
        run: pip install uv

      - name: build python backend and Tauri app for Linux
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1
          cd projects/llm_backend/
          uv venv
          . .venv/bin/activate
          uv sync
          cd app
          pyinstaller -F main.py --clean --hidden-import=pydantic --hidden-import=pydantic-core --hidden-import=pydantic.deprecated.decorator
          mv dist/main dist/main-x86_64-unknown-linux-gnu
          cd ../../frontend
          yarn install --frozen-lockfile
          yarn tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: build python backend and Tauri app for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd projects/llm_backend/
          uv venv
          .\.venv\Scripts\activate
          uv sync
          cd app
          pyinstaller -F main.py --clean --hidden-import=pydantic --hidden-import=pydantic-core --hidden-import=pydantic.deprecated.decorator
          mv dist/main.exe dist/main-x86_64-pc-windows-msvc.exe
          cd ../../frontend
          yarn install --frozen-lockfile
          yarn tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: build backend and Tauri binaries for mac
        if: matrix.os == 'macos-latest'
        env:
          MANUAL_APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          MANUAL_APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          MANUAL_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MANUAL_APPLE_ID: ${{ secrets.APPLE_ID }}
          MANUAL_APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          MANUAL_APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MANUAL_APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          MANUAL_APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          MANUAL_APPLE_API_KEY_PATH: ${{ secrets.APPLE_API_KEY_PATH }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MANUAL_APPLE_NOTARIZATION_API_PRIVATE_KEY: ${{ secrets.APPLE_NOTARIZATION_API_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          # Create a directory for the API key and decode it there
          mkdir -p ~/private_keys
          echo $MANUAL_APPLE_NOTARIZATION_API_PRIVATE_KEY | base64 --decode > ~/private_keys/AuthKey.p8
          echo $MANUAL_APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$MANUAL_KEYCHAIN_PASSWORD" build.keychain

          security default-keychain -s build.keychain

          security unlock-keychain -p "$MANUAL_KEYCHAIN_PASSWORD" build.keychain

          security import certificate.p12 -k build.keychain -P "$MANUAL_APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MANUAL_KEYCHAIN_PASSWORD" build.keychain

          # Store certificate ID
          security find-identity -v -p codesigning build.keychain

          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | head -1)
          if [ -z "$CERT_INFO" ]; then
            echo "No signing certificates found in keychain!"
            exit 1
          fi
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV

          # Build process
          cd projects/llm_backend/
          uv venv
          . .venv/bin/activate
          uv sync
          cd app
          pyinstaller -F main.py --clean --hidden-import=pydantic --hidden-import=pydantic-core --hidden-import=pydantic.deprecated.decorator

          cp dist/main dist/main-aarch64-apple-darwin
          cp dist/main dist/main-x86_64-apple-darwin

          cd ../../frontend
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          yarn install --frozen-lockfile

          # Check the contents of the dist directory, debugging step
          hdiutil info

          # Build both architectures first
          echo "Building for x86_64..."
          yarn tauri build --target x86_64-apple-darwin --verbose
          if [ $? -ne 0 ]; then
            echo "Error: x86_64 build failed"
            exit 1
          fi

          echo "Building for aarch64..."
          yarn tauri build --target aarch64-apple-darwin --verbose
          if [ $? -ne 0 ]; then
            echo "Error: aarch64 build failed"
            exit 1
          fi

          # Wait for files to be written
          echo "Waiting for builds to complete..."
          sleep 10

          # Get version from tauri.conf.json using jq
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "Found version: ${VERSION}"

          # Process x86_64 build
          echo "Processing x86_64 build..."
          # Codesign x86_64 build
          echo "Codesigning x86_64 app bundle..."
          codesign --force --deep --timestamp --verify --verbose=4 --options runtime --entitlements "src-tauri/entitlements.plist" --sign "$CERT_ID" "src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Raki.app"
          if [ $? -ne 0 ]; then
            echo "Error: x86_64 codesigning failed"
            exit 1
          fi

          # Create new DMG with signed app bundle
          echo "Creating new DMG with signed app bundle..."
          cd "src-tauri/target/x86_64-apple-darwin/release/bundle/dmg"
          # Delete existing DMG
          rm -f "Raki_${VERSION}_x64.dmg"
          # Create new DMG with same name
          hdiutil create -volname "Raki" -srcfolder "../macos/Raki.app" -ov -format UDZO "Raki_${VERSION}_x64.dmg"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to create new DMG"
            exit 1
          fi

          # Notarize x86_64 build
          echo "Notarizing x86_64 DMG..."
          xcrun notarytool submit "Raki_${VERSION}_x64.dmg" \
            --apple-id "$MANUAL_APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$MANUAL_APPLE_TEAM_ID" \
            --wait
          if [ $? -ne 0 ]; then
            echo "Error: x86_64 notarization failed"
            exit 1
          fi

          # Staple x86_64 notarization
          echo "Stapling x86_64 notarization ticket..."
          xcrun stapler staple "Raki_${VERSION}_x64.dmg"
          if [ $? -ne 0 ]; then
            echo "Error: x86_64 stapling failed"
            exit 1
          fi

          cd ../../../../..

          # Process aarch64 build
          echo "Processing aarch64 build..."
          # Codesign aarch64 build
          echo "Codesigning aarch64 app bundle..."
          codesign --force --deep --timestamp --verify --verbose=4 --options runtime --entitlements "src-tauri/entitlements.plist" --sign "$CERT_ID" "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Raki.app"
          if [ $? -ne 0 ]; then
            echo "Error: aarch64 codesigning failed"
            exit 1
          fi

          # Create new DMG with signed app bundle
          echo "Creating new DMG with signed app bundle..."
          cd "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg"
          # Delete existing DMG
          rm -f "Raki_${VERSION}_aarch64.dmg"
          # Create new DMG with same name
          hdiutil create -volname "Raki" -srcfolder "../macos/Raki.app" -ov -format UDZO "Raki_${VERSION}_aarch64.dmg"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to create new DMG"
            exit 1
          fi

          # Notarize aarch64 build
          echo "Notarizing aarch64 DMG..."
          xcrun notarytool submit "Raki_${VERSION}_aarch64.dmg" \
            --apple-id "$MANUAL_APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$MANUAL_APPLE_TEAM_ID" \
            --wait
          if [ $? -ne 0 ]; then
            echo "Error: aarch64 notarization failed"
            exit 1
          fi

          # Staple aarch64 notarization
          echo "Stapling aarch64 notarization ticket..."
          xcrun stapler staple "Raki_${VERSION}_aarch64.dmg"
          if [ $? -ne 0 ]; then
            echo "Error: aarch64 stapling failed"
            exit 1
          fi

          cd ../../../../..

          # List the contents of both target directories
          echo "Contents of x86_64 target directory:"
          ls -la src-tauri/target/x86_64-apple-darwin/release/bundle
          echo "Contents of aarch64 target directory:"
          ls -la src-tauri/target/aarch64-apple-darwin/release/bundle

      - name: upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  publish:
    needs: build

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: publish release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release publish ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
