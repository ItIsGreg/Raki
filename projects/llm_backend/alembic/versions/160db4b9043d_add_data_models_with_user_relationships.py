"""Add data models with user relationships

Revision ID: 160db4b9043d
Revises: 5468da3b8982
Create Date: 2025-07-22 20:26:16.610549

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '160db4b9043d'
down_revision: Union[str, Sequence[str], None] = '5468da3b8982'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('datasets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mode', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_datasets_id'), 'datasets', ['id'], unique=False)
    op.create_index(op.f('ix_datasets_user_id'), 'datasets', ['user_id'], unique=False)
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mode', sa.String(), nullable=False),
    sa.Column('example', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_profiles_id'), 'profiles', ['id'], unique=False)
    op.create_index(op.f('ix_profiles_user_id'), 'profiles', ['user_id'], unique=False)
    op.create_table('user_llm_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('llm_provider', sa.String(), nullable=True),
    sa.Column('llm_model', sa.String(), nullable=True),
    sa.Column('llm_url', sa.String(), nullable=True),
    sa.Column('batch_size', sa.Integer(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_llm_configs_id'), 'user_llm_configs', ['id'], unique=False)
    op.create_index(op.f('ix_user_llm_configs_user_id'), 'user_llm_configs', ['user_id'], unique=False)
    op.create_table('user_settings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tutorial_completed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_settings_id'), 'user_settings', ['id'], unique=False)
    op.create_index(op.f('ix_user_settings_user_id'), 'user_settings', ['user_id'], unique=True)
    op.create_table('annotated_datasets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('mode', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_annotated_datasets_dataset_id'), 'annotated_datasets', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_annotated_datasets_id'), 'annotated_datasets', ['id'], unique=False)
    op.create_index(op.f('ix_annotated_datasets_profile_id'), 'annotated_datasets', ['profile_id'], unique=False)
    op.create_index(op.f('ix_annotated_datasets_user_id'), 'annotated_datasets', ['user_id'], unique=False)
    op.create_table('profile_points',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('synonyms', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('datatype', sa.String(), nullable=False),
    sa.Column('valueset', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('previous_point_id', sa.UUID(), nullable=True),
    sa.Column('next_point_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['next_point_id'], ['profile_points.id'], ),
    sa.ForeignKeyConstraint(['previous_point_id'], ['profile_points.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_profile_points_id'), 'profile_points', ['id'], unique=False)
    op.create_index(op.f('ix_profile_points_profile_id'), 'profile_points', ['profile_id'], unique=False)
    op.create_table('segmentation_profile_points',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('synonyms', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('previous_point_id', sa.UUID(), nullable=True),
    sa.Column('next_point_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['next_point_id'], ['segmentation_profile_points.id'], ),
    sa.ForeignKeyConstraint(['previous_point_id'], ['segmentation_profile_points.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_segmentation_profile_points_id'), 'segmentation_profile_points', ['id'], unique=False)
    op.create_index(op.f('ix_segmentation_profile_points_profile_id'), 'segmentation_profile_points', ['profile_id'], unique=False)
    op.create_table('texts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_texts_dataset_id'), 'texts', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_texts_id'), 'texts', ['id'], unique=False)
    op.create_table('annotated_texts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('text_id', sa.UUID(), nullable=False),
    sa.Column('annotated_dataset_id', sa.UUID(), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('ai_faulty', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['annotated_dataset_id'], ['annotated_datasets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['text_id'], ['texts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_annotated_texts_annotated_dataset_id'), 'annotated_texts', ['annotated_dataset_id'], unique=False)
    op.create_index(op.f('ix_annotated_texts_id'), 'annotated_texts', ['id'], unique=False)
    op.create_index(op.f('ix_annotated_texts_text_id'), 'annotated_texts', ['text_id'], unique=False)
    op.create_table('data_points',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('annotated_text_id', sa.UUID(), nullable=False),
    sa.Column('profile_point_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('match', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['annotated_text_id'], ['annotated_texts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_point_id'], ['profile_points.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_points_annotated_text_id'), 'data_points', ['annotated_text_id'], unique=False)
    op.create_index(op.f('ix_data_points_id'), 'data_points', ['id'], unique=False)
    op.create_table('segment_data_points',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('annotated_text_id', sa.UUID(), nullable=False),
    sa.Column('profile_point_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('begin_match', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('end_match', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['annotated_text_id'], ['annotated_texts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_point_id'], ['segmentation_profile_points.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_segment_data_points_annotated_text_id'), 'segment_data_points', ['annotated_text_id'], unique=False)
    op.create_index(op.f('ix_segment_data_points_id'), 'segment_data_points', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_segment_data_points_id'), table_name='segment_data_points')
    op.drop_index(op.f('ix_segment_data_points_annotated_text_id'), table_name='segment_data_points')
    op.drop_table('segment_data_points')
    op.drop_index(op.f('ix_data_points_id'), table_name='data_points')
    op.drop_index(op.f('ix_data_points_annotated_text_id'), table_name='data_points')
    op.drop_table('data_points')
    op.drop_index(op.f('ix_annotated_texts_text_id'), table_name='annotated_texts')
    op.drop_index(op.f('ix_annotated_texts_id'), table_name='annotated_texts')
    op.drop_index(op.f('ix_annotated_texts_annotated_dataset_id'), table_name='annotated_texts')
    op.drop_table('annotated_texts')
    op.drop_index(op.f('ix_texts_id'), table_name='texts')
    op.drop_index(op.f('ix_texts_dataset_id'), table_name='texts')
    op.drop_table('texts')
    op.drop_index(op.f('ix_segmentation_profile_points_profile_id'), table_name='segmentation_profile_points')
    op.drop_index(op.f('ix_segmentation_profile_points_id'), table_name='segmentation_profile_points')
    op.drop_table('segmentation_profile_points')
    op.drop_index(op.f('ix_profile_points_profile_id'), table_name='profile_points')
    op.drop_index(op.f('ix_profile_points_id'), table_name='profile_points')
    op.drop_table('profile_points')
    op.drop_index(op.f('ix_annotated_datasets_user_id'), table_name='annotated_datasets')
    op.drop_index(op.f('ix_annotated_datasets_profile_id'), table_name='annotated_datasets')
    op.drop_index(op.f('ix_annotated_datasets_id'), table_name='annotated_datasets')
    op.drop_index(op.f('ix_annotated_datasets_dataset_id'), table_name='annotated_datasets')
    op.drop_table('annotated_datasets')
    op.drop_index(op.f('ix_user_settings_user_id'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_id'), table_name='user_settings')
    op.drop_table('user_settings')
    op.drop_index(op.f('ix_user_llm_configs_user_id'), table_name='user_llm_configs')
    op.drop_index(op.f('ix_user_llm_configs_id'), table_name='user_llm_configs')
    op.drop_table('user_llm_configs')
    op.drop_index(op.f('ix_profiles_user_id'), table_name='profiles')
    op.drop_index(op.f('ix_profiles_id'), table_name='profiles')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_datasets_user_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_id'), table_name='datasets')
    op.drop_table('datasets')
    # ### end Alembic commands ###
